{"openapi": "3.1.0", "servers": [{"url": "https://dev.mazaal.ai/api/sdk/pre-trained-models"}], "info": {"title": "Mazaal AI Pretrained models API", "version": "1.0", "description": "Pretrained model guide\n"}, "tags": [{"name": "j-hartmann/emotion-english-distilroberta-base", "x-displayName": "emotion-english-distilroberta-base"}, {"name": "keremberke/yolov8m-blood-cell-detection", "x-displayName": "yolov8m-blood-cell-detection"}, {"name": "ultralyticsplus/yolov8s", "x-displayName": "yolov8s"}, {"name": "MoritzLaurer/mDeBERTa-v3-base-mnli-xnli", "x-displayName": "mDeBERTa-v3-base-mnli-xnli"}, {"name": "background-remover", "x-displayName": "background-remover"}, {"name": "inswapper", "x-displayName": "inswapper"}, {"name": "segment_anything", "x-displayName": "segment_anything"}, {"name": "vilt-b32-finetuned-vqa", "x-displayName": "vilt-b32-finetuned-vqa"}, {"name": "suno-ai-bark", "x-displayName": "suno-ai-bark"}, {"name": "paddle_ocr", "x-displayName": "paddle_ocr"}, {"name": "microsoft/table-transformer-structure-recognition", "x-displayName": "table-transformer-structure-recognition"}, {"name": "fast-segment-anything", "x-displayName": "fast-segment-anything"}, {"name": "keremberke/yolov5m-smoke", "x-displayName": "yolov5m-smoke"}, {"name": "layoutlm-invoices", "x-displayName": "layoutlm-invoices"}, {"name": "sdxl", "x-displayName": "sdxl"}, {"name": "valhalla/distilbart-mnli-12-3", "x-displayName": "distilbart-mnli-12-3"}, {"name": "mistral-7b-instruct", "x-displayName": "mistral-7b-instruct"}, {"name": "Controlnet-canny", "x-displayName": "Controlnet-canny"}, {"name": "vall-e-x", "x-displayName": "vall-e-x"}, {"name": "Whisper", "x-displayName": "Whisper"}, {"name": "ckiplab/bert-base-chinese-ner", "x-displayName": "bert-base-chinese-ner"}, {"name": "nbroad/ESG-BERT", "x-displayName": "ESG-BERT"}, {"name": "vit-gpt2-image-captioning", "x-displayName": "vit-gpt2-image-captioning"}, {"name": "cardiffnlp/twitter-roberta-base-sentiment-latest", "x-displayName": "twitter-roberta-base-sentiment-latest"}, {"name": "distilbert-base-uncased-finetuned-sst-2-english", "x-displayName": "distilbert-base-uncased-finetuned-sst-2-english"}, {"name": "maskformer-swin-base-coco", "x-displayName": "maskformer-swin-base-coco"}, {"name": "ml6team/keyphrase-extraction-kbir-inspec", "x-displayName": "keyphrase-extraction-kbir-inspec"}, {"name": "Intel/dpt-large", "x-displayName": "dpt-large"}, {"name": "nateraw/vit-age-classifier", "x-displayName": "vit-age-classifier"}, {"name": "layoutlm-document-qa", "x-displayName": "layoutlm-document-qa"}, {"name": "sdxl-base", "x-displayName": "sdxl-base"}, {"name": "trocr-base-handwritten", "x-displayName": "trocr-base-handwritten"}, {"name": "hustvl/yolos-tiny", "x-displayName": "yolos-tiny"}, {"name": "martin-ha/toxic-comment-model", "x-displayName": "toxic-comment-model"}, {"name": "google/owlvit-base-patch32", "x-displayName": "owlvit-base-patch32"}, {"name": "Controlnet-depth", "x-displayName": "Controlnet-depth"}, {"name": "Controlnet-mlsd", "x-displayName": "Controlnet-mlsd"}, {"name": "easyocr-model", "x-displayName": "easyocr-model"}, {"name": "Controlnet-normal", "x-displayName": "Controlnet-normal"}, {"name": "keremberke/yolov8m-table-extraction", "x-displayName": "yolov8m-table-extraction"}, {"name": "Controlnet-hed", "x-displayName": "Controlnet-hed"}, {"name": "nickmuchi/yolos-small-finetuned-license-plate-detection", "x-displayName": "yolos-small-finetuned-license-plate-detection"}, {"name": "Controlnet-scribble", "x-displayName": "Controlnet-scribble"}, {"name": "Controlnet-openpose", "x-displayName": "Controlnet-openpose"}, {"name": "krinal214/bert-zero-shot", "x-displayName": "bert-zero-shot"}, {"name": "papluca/xlm-roberta-base-language-detection", "x-displayName": "xlm-roberta-base-language-detection"}, {"name": "Controlnet-seg", "x-displayName": "Controlnet-seg"}, {"name": "keremberke/yolov5m-aerial-sheep", "x-displayName": "yolov5m-aerial-sheep"}, {"name": "donut-base", "x-displayName": "donut-base"}, {"name": "d4data/biomedical-ner-all", "x-displayName": "biomedical-ner-all"}, {"name": "rendchevi/nix-tts", "x-displayName": "nix-tts"}, {"name": "skin-retouch", "x-displayName": "skin-retouch"}, {"name": "Davlan/bert-base-multilingual-cased-ner-hrl", "x-displayName": "bert-base-multilingual-cased-ner-hrl"}, {"name": "llama-2-70b-chat-hf", "x-displayName": "llama-2-70b-chat-hf"}, {"name": "keremberke/yolov5n-construction-safety", "x-displayName": "yolov5n-construction-safety"}, {"name": "stable-diffusion-2", "x-displayName": "stable-diffusion-2"}], "x-tagGroups": [{"name": "text", "tags": ["j-hartmann/emotion-english-distilroberta-base", "MoritzLaurer/mDeBERTa-v3-base-mnli-xnli", "vilt-b32-finetuned-vqa", "microsoft/table-transformer-structure-recognition", "layoutlm-invoices", "valhalla/distilbart-mnli-12-3", "mistral-7b-instruct", "ckiplab/bert-base-chinese-ner", "nbroad/ESG-BERT", "vit-gpt2-image-captioning", "cardiffnlp/twitter-roberta-base-sentiment-latest", "distilbert-base-uncased-finetuned-sst-2-english", "ml6team/keyphrase-extraction-kbir-inspec", "nateraw/vit-age-classifier", "layoutlm-document-qa", "trocr-base-handwritten", "martin-ha/toxic-comment-model", "google/owlvit-base-patch32", "easyocr-model", "krinal214/bert-zero-shot", "papluca/xlm-roberta-base-language-detection", "donut-base", "d4data/biomedical-ner-all", "Davlan/bert-base-multilingual-cased-ner-hrl", "llama-2-70b-chat-hf"]}, {"name": "image", "tags": ["keremberke/yolov8m-blood-cell-detection", "ultralyticsplus/yolov8s", "background-remover", "inswapper", "segment_anything", "paddle_ocr", "fast-segment-anything", "keremberke/yolov5m-smoke", "sdxl", "Controlnet-canny", "maskformer-swin-base-coco", "Intel/dpt-large", "sdxl-base", "hustvl/yolos-tiny", "Controlnet-depth", "Controlnet-mlsd", "Controlnet-normal", "keremberke/yolov8m-table-extraction", "Controlnet-hed", "nickmuchi/yolos-small-finetuned-license-plate-detection", "Controlnet-scribble", "Controlnet-openpose", "Controlnet-seg", "keremberke/yolov5m-aerial-sheep", "skin-retouch", "keremberke/yolov5n-construction-safety", "stable-diffusion-2"]}, {"name": "audio", "tags": ["suno-ai-bark", "vall-e-x", "Whisper", "rendchevi/nix-tts"]}], "components": {"schemas": {"DefaultRes": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "status": {"description": "Current status for predictive process.", "type": "string"}}}, "emotion-english-distilroberta-base": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "emotion-english-distilroberta-base-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolov8m-blood-cell-detection": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolov8m-blood-cell-detection-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolov8s": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolov8s-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "mdeberta-v3-base-mnli-xnli": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}, "possible_label": {"description": "Possible categories to classify", "type": "list"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str", "possible_label"]}}}, "mdeberta-v3-base-mnli-xnli-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "background-remover": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "background-remover-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "inswapper": {"type": "object", "required": ["source_image", "target_image"], "properties": {"upscale": {"description": "Desired audio script for clone", "type": "int", "format": "binary"}, "face_restore": {"description": "Sample audio for clone", "type": "str", "format": "binary"}, "source_image": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "target_image": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "face_upsample": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "output_format": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "source_indexes": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "target_indexes": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "background_enhance": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}, "codeformer_fidelity": {"description": "Sample audio transcript for clone", "type": "str", "format": "binary"}}}, "inswapper-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "segment_anything": {"type": "object", "required": ["possible_label", "image"], "properties": {"possible_label": {"description": "Possible categories to classify", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "segment_anything-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "vilt-b32-finetuned-vqa": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "Input question that ask from input", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "vilt-b32-finetuned-vqa-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "suno-ai-bark": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "suno-ai-bark-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "paddle_ocr": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "paddle_ocr-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "table-transformer-structure-recognition": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "table-transformer-structure-recognition-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "fast-segment-anything": {"type": "object", "required": ["possible_label", "image"], "properties": {"possible_label": {"description": "Possible categories to classify", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "fast-segment-anything-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolov5m-smoke": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolov5m-smoke-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "layoutlm-invoices": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "Input question that ask from input", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "layoutlm-invoices-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "sdxl": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"prompt": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["prompt"]}}}, "sdxl-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "distilbart-mnli-12-3": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}, "multiclass": {"description": "Classify input into more categories", "type": "bool"}, "possible_label": {"description": "Possible categories to classify", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str", "multiclass", "possible_label"]}}}, "distilbart-mnli-12-3-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "mistral-7b-instruct": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text"}}, "description": "The input data for prediction"}}}, "mistral-7b-instruct-res": {"type": "object", "properties": {"id": {"type": "string", "description": "Process ID for the predictive process."}, "output": {"type": "object", "properties": {"box": {"type": "array", "description": "Boxes that generated from model prediction."}, "score": {"type": "array", "description": "Confident score that generated from model prediction."}, "output": {"type": "array", "description": "Main output that generated from model prediction."}, "data_type": {"type": "string", "description": "Type of output"}, "additional": {"type": "array", "description": "Additional fields (labels, segmentations etc)"}}, "description": "Output related fields"}, "status": {"type": "string", "description": "Current status for predictive process."}, "delayTime": {"type": "string", "description": "Cold start time of model loading"}, "executionTime": {"type": "string", "description": "Prediction time of model."}}}, "controlnet-canny": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-canny-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "vall-e-x": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"prompt": {"description": "Desired audio script for clone", "type": "str"}, "input_str": {"description": "Sample audio for clone", "type": "str"}, "transcript": {"description": "Sample audio transcript for clone", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["prompt", "input_str", "transcript"]}}}, "vall-e-x-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "whisper": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input audio url", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "whisper-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "bert-base-chinese-ner": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "bert-base-chinese-ner-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "esg-bert": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "esg-bert-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "vit-gpt2-image-captioning": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "vit-gpt2-image-captioning-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "twitter-roberta-base-sentiment-latest": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "twitter-roberta-base-sentiment-latest-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "distilbert-base-uncased-finetuned-sst-2-english": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "distilbert-base-uncased-finetuned-sst-2-english-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "maskformer-swin-base-coco": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "maskformer-swin-base-coco-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "keyphrase-extraction-kbir-inspec": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "keyphrase-extraction-kbir-inspec-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "dpt-large": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "dpt-large-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "vit-age-classifier": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "vit-age-classifier-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "layoutlm-document-qa": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "Input question that ask from input", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "layoutlm-document-qa-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "sdxl-base": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for image generation"}}, "description": "The input data for prediction"}}}, "sdxl-base-res": {"type": "object", "properties": {"id": {"type": "string", "description": "Process ID for the predictive process."}, "output": {"type": "object", "properties": {"box": {"type": "array", "description": "Boxes that generated from model prediction."}, "score": {"type": "array", "description": "Confident score that generated from model prediction."}, "output": {"type": "array", "description": "Main output that generated from model prediction."}, "data_type": {"type": "string", "description": "Type of output"}, "additional": {"type": "array", "description": "Additional fields (labels, segmentations etc)"}}, "description": "Output related fields"}, "status": {"type": "string", "description": "Current status for predictive process."}, "delayTime": {"type": "string", "description": "Cold start time of model loading"}, "executionTime": {"type": "string", "description": "Prediction time of model."}}}, "trocr-base-handwritten": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "trocr-base-handwritten-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolos-tiny": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolos-tiny-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "toxic-comment-model": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "toxic-comment-model-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "owlvit-base-patch32": {"type": "object", "required": ["possible_label", "image"], "properties": {"possible_label": {"description": "Possible categories to classify", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "owlvit-base-patch32-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-depth": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-depth-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-mlsd": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-mlsd-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "easyocr-model": {"type": "object", "required": ["language", "image"], "properties": {"language": {"description": "Target language for OCR", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "easyocr-model-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-normal": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-normal-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolov8m-table-extraction": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolov8m-table-extraction-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-hed": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-hed-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolos-small-finetuned-license-plate-detection": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolos-small-finetuned-license-plate-detection-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-scribble": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-scribble-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-openpose": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-openpose-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "bert-zero-shot": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"prompt": {"description": "Input question that ask from input", "type": "str"}, "input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["prompt", "input_str"]}}}, "bert-zero-shot-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "xlm-roberta-base-language-detection": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "xlm-roberta-base-language-detection-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "controlnet-seg": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "the text guidance to generate the image you desire", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "controlnet-seg-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "yolov5m-aerial-sheep": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolov5m-aerial-sheep-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "donut-base": {"type": "object", "required": ["prompt", "image"], "properties": {"prompt": {"description": "Input question that ask from input", "type": "str", "format": "binary"}, "image": {"description": "Input image", "type": "str", "format": "binary"}}}, "donut-base-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "biomedical-ner-all": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "biomedical-ner-all-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "nix-tts": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "nix-tts-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "skin-retouch": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "skin-retouch-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "bert-base-multilingual-cased-ner-hrl": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text for model", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "bert-base-multilingual-cased-ner-hrl-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "llama-2-70b-chat-hf": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "Input text"}}, "description": "The input data for prediction"}}}, "llama-2-70b-chat-hf-res": {"type": "array"}, "yolov5n-construction-safety": {"type": "object", "required": ["image"], "properties": {"image": {"description": "Input image", "type": "str", "format": "binary"}}}, "yolov5n-construction-safety-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}, "stable-diffusion-2": {"type": "object", "required": ["input"], "properties": {"input": {"properties": {"input_str": {"description": "The text guidance to generate the image you desire", "type": "str"}}, "description": "The input data for prediction", "type": "object", "required": ["input_str"]}}}, "stable-diffusion-2-get": {"type": "object", "properties": {"id": {"description": "Process ID for the predictive process.", "type": "string"}, "output": {"type": "object", "description": "Output related fields", "properties": {"box": {"description": "Boxes that generated from model prediction.", "type": "array"}, "score": {"description": "Confident score that generated from model prediction.", "type": "array"}, "output": {"description": "Main output that generated from model prediction.", "type": "array"}, "data_type": {"description": "Type of output", "type": "string"}, "additional": {"description": "Additional fields (labels, segmentations etc)", "type": "array"}}}, "status": {"description": "Current status for predictive process.", "type": "string"}, "delayTime": {"description": "Cold start time of model loading", "type": "string"}, "executionTime": {"description": "Prediction time of model.", "type": "string"}}}}, "securitySchemes": {"Secret User Key": {"type": "http", "scheme": "bearer", "bearerFormat": "mz-XXXXXXXXXXXX", "description": "Mazaal AI authorization key"}}}, "paths": {"/76": {"post": {"tags": ["j-hartmann/emotion-english-distilroberta-base"], "description": "Emotion detection from text", "summary": "Predict with emotion-english-distilroberta-base", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/76\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"I love this\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/emotion-english-distilroberta-base"}, "example": {"input": {"input_str": "I love this"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/76?outId={process_id}": {"get": {"tags": ["j-hartmann/emotion-english-distilroberta-base"], "summary": "Get result from emotion-english-distilroberta-base", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/76?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/emotion-english-distilroberta-base-get"}, "example": {"id": "5b149110-792a-49fd-bd01-1d18eab9efd6", "output": {"box": [], "score": [0.0013875315198674798, 0.0007134044426493347, 0.0003984911891166121, 0.9845667481422424, 0.003475314239040017, 0.004531430546194315, 0.004927210509777069], "output": ["anger", "disgust", "fear", "joy", "neutral", "sadness", "surprise"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 9143, "executionTime": 781}}}}}}}, "/48": {"post": {"tags": ["keremberke/yolov8m-blood-cell-detection"], "description": "Detect blood cells in medical images", "summary": "Predict with yolov8m-blood-cell-detection", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/48\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolov8m-blood-cell-detection"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/48?outId={process_id}": {"get": {"tags": ["keremberke/yolov8m-blood-cell-detection"], "summary": "Get result from yolov8m-blood-cell-detection", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/48?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolov8m-blood-cell-detection-get"}, "example": {"id": "f3a29e59-1dc8-4bf6-bd66-f60790f2fed1", "output": {"box": [[1089, 447, 1201, 542], [369, 256, 457, 346], [595, 80, 704, 184], [39, 130, 137, 241], [503, 422, 595, 520], [1033, 264, 1126, 366], [726, 416, 838, 524], [733, 117, 833, 223], [1181, 272, 1276, 373], [196, 235, 290, 333], [160, 503, 248, 598], [649, 199, 746, 320], [1170, 166, 1263, 253], [1210, 370, 1280, 467], [193, 326, 290, 433], [556, 367, 659, 467], [274, 424, 369, 515], [825, 65, 947, 172], [125, 103, 230, 221], [1037, 166, 1133, 268], [559, 252, 668, 378], [564, 497, 652, 588], [0, 4, 114, 126], [70, 587, 156, 683], [0, 289, 93, 403], [800, 346, 926, 448], [879, 153, 989, 271], [1153, 596, 1261, 700], [273, 273, 377, 388], [0, 469, 75, 571], [1105, 67, 1195, 184], [334, 348, 457, 471], [474, 249, 570, 381], [624, 424, 718, 532], [955, 212, 1045, 332], [1119, 221, 1200, 354], [839, 554, 935, 667], [585, 567, 696, 685], [1054, 601, 1163, 718], [77, 490, 170, 601], [222, 547, 318, 653], [941, 7, 1120, 200], [432, 626, 549, 719], [414, 37, 526, 163], [721, 563, 853, 661], [474, 122, 579, 239], [1049, 359, 1163, 459], [293, 1, 418, 90], [231, 482, 318, 558], [105, 303, 209, 461], [1185, 509, 1280, 623], [347, 640, 438, 719], [850, 250, 963, 368], [340, 121, 442, 227], [620, 1, 732, 84], [1018, 530, 1137, 612], [1006, 417, 1095, 550], [952, 594, 1061, 717], [424, 186, 509, 311], [0, 554, 69, 663], [676, 506, 804, 591]], "score": [0.872871994972229, 0.867180585861206, 0.8642299175262451, 0.8602820634841919, 0.8592974543571472, 0.856281578540802, 0.8510521054267883, 0.8506277203559875, 0.8501075506210327, 0.8464404344558716, 0.8387285470962524, 0.8376691341400146, 0.8316717743873596, 0.8265300989151001, 0.8249589204788208, 0.8225315809249878, 0.8137295246124268, 0.8129192590713501, 0.8126491904258728, 0.8092378377914429, 0.8091727495193481, 0.8005761504173279, 0.7955678105354309, 0.7950827479362488, 0.7893306016921997, 0.7881128191947937, 0.7812492847442627, 0.7609593868255615, 0.7547171711921692, 0.7464239597320557, 0.7403414249420166, 0.7346124053001404, 0.7333899140357971, 0.7293029427528381, 0.7264273166656494, 0.716696560382843, 0.7145424485206604, 0.7126410603523254, 0.7122524976730347, 0.7085069417953491, 0.6965492367744446, 0.6923624277114868, 0.6895495653152466, 0.6866249442100525, 0.665054440498352, 0.6540052890777588, 0.6479551792144775, 0.6450642943382263, 0.6444165706634521, 0.5977956652641296, 0.5892926454544067, 0.5767989754676819, 0.5687374472618103, 0.5632655620574951, 0.5394450426101685, 0.5343992114067078, 0.4898230731487274, 0.431794673204422, 0.28870469331741333, 0.26873379945755005, 0.25150763988494873], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}]}, "status": "COMPLETED", "delayTime": 134386, "executionTime": 5048}}}}}}}, "/44": {"post": {"tags": ["ultralyticsplus/yolov8s"], "description": "Object detection (generic)", "summary": "Predict with yolov8s", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/44\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolov8s"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/44?outId={process_id}": {"get": {"tags": ["ultralyticsplus/yolov8s"], "summary": "Get result from yolov8s", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/44?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolov8s-get"}, "example": {"id": "6d0ed408-2210-4fea-8744-28c5c2ce57ec", "output": {"box": [[745, 41, 1136, 714], [133, 200, 1127, 714], [437, 434, 531, 718]], "score": [0.894010603427887, 0.8869999647140503, 0.7403771877288818], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": ["person", "person", "tie"]}]}, "status": "COMPLETED", "delayTime": 5543, "executionTime": 3206}}}}}}}, "/98": {"post": {"tags": ["MoritzLaurer/mDeBERTa-v3-base-mnli-xnli"], "description": "Zero-shot classification in multiple language", "summary": "Predict with mdeberta-v3-base-mnli-xnli", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/98\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU\", \"input_type\": \"text_tags\", \"possible_label\": [\"politics\", \"economy\", \"entertainment\", \"environment\"]}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mdeberta-v3-base-mnli-xnli"}, "example": {"input": {"input_str": "Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU", "possible_label": ["politics", "economy", "entertainment", "environment"]}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/98?outId={process_id}": {"get": {"tags": ["MoritzLaurer/mDeBERTa-v3-base-mnli-xnli"], "summary": "Get result from mdeberta-v3-base-mnli-xnli", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/98?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mdeberta-v3-base-mnli-xnli-get"}, "example": {"id": "c4334025-1cf5-4965-982c-7b5897a49258", "output": {"box": [], "score": [0.9658797979354858, 0.022846905514597893, 0.007333934307098389, 0.003939352463930845], "output": ["politics", "economy", "environment", "entertainment"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 14382, "executionTime": 811}}}}}}}, "/149": {"post": {"tags": ["background-remover"], "description": "Remove portrait background", "summary": "Predict with background-remover", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/149\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/background-remover"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/149?outId={process_id}": {"get": {"tags": ["background-remover"], "summary": "Get result from background-remover", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/149?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/background-remover-get"}, "example": {"id": "bdea0f09-f886-4b2f-b026-888781033ee3", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 22884, "executionTime": 4793}}}}}}}, "/150": {"post": {"tags": ["inswapper"], "description": "Swap face", "summary": "Predict with inswapper", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/150\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"source_image=@cbimage.png;type=image/png\" \\\n  -F \"target_image=@cbimage_2.png;type=image/png\""}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/inswapper"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/150?outId={process_id}": {"get": {"tags": ["inswapper"], "summary": "Get result from inswapper", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/150?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/inswapper-get"}, "example": {"id": "b18ef815-980d-4209-8e11-5c5eb91d3463", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 4371, "executionTime": 9215}}}}}}}, "/144": {"post": {"tags": ["segment_anything"], "description": "Segment Anything Model", "summary": "Predict with segment_anything", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/144\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n  -F \"possible_label=camera, hat, skateboard\" \\\n \n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/segment_anything"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/144?outId={process_id}": {"get": {"tags": ["segment_anything"], "summary": "Get result from segment_anything", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/144?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/segment_anything-get"}, "example": {"id": "571f3075-c678-4b97-b83f-8cfda64fd252", "output": {"box": [[1, 1, 1, 1], [2, 2, 2, 2]], "score": [0.5, 0.4], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 10478, "executionTime": 1786}}}}}}}, "/20": {"post": {"tags": ["vilt-b32-finetuned-vqa"], "description": "Ask questions from an image", "summary": "Predict with vilt-b32-finetuned-vqa", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/20\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=How many cats are there?\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/vilt-b32-finetuned-vqa"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/20?outId={process_id}": {"get": {"tags": ["vilt-b32-finetuned-vqa"], "summary": "Get result from vilt-b32-finetuned-vqa", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/20?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vilt-b32-finetuned-vqa-get"}, "example": {"id": "b4548c7a-daca-4b4d-9c89-d6455abe33de", "output": {"box": [], "score": [], "output": ["1"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 181788, "executionTime": 1869}}}}}}}, "/146": {"post": {"tags": ["suno-ai-bark"], "description": "Generate voice from text Prompt", "summary": "Predict with suno-ai-bark", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/146\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Hello, my name is Suno. And, uh \\u2014 and I like pizza. [laughs] But I also have other interests such as playing tic tac toe.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/suno-ai-bark"}, "example": {"input": {"input_str": "Hello, my name is Suno. And, uh \u2014 and I like pizza. [laughs] But I also have other interests such as playing tic tac toe."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/146?outId={process_id}": {"get": {"tags": ["suno-ai-bark"], "summary": "Get result from suno-ai-bark", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/146?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/suno-ai-bark-get"}, "example": {"id": "3bf1bd2a-f7a3-43f3-8c30-227a9835ecc6", "output": {"box": [], "score": [], "output": ["https://runpod-result.s3.ap-southeast-2.amazonaws.com/suno-ai-bark/eab79e96-5a81-4467-abe4-7b621b082f09.wav?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAXUA7OB55IHIQPVPX%2F20230708%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230708T081057Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=23e5421605e66cc234f8d800258e62f05203e9c5912c75f283f74adaafe8527f"], "data_type": "audio_s3", "additional": []}, "status": "COMPLETED", "delayTime": 5888, "executionTime": 21342}}}}}}}, "/142": {"post": {"tags": ["paddle_ocr"], "description": "OCR multilingual", "summary": "Predict with paddle_ocr", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/142\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/paddle_ocr"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/142?outId={process_id}": {"get": {"tags": ["paddle_ocr"], "summary": "Get result from paddle_ocr", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/142?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/paddle_ocr-get"}, "example": {"id": "5f35817d-5202-4170-ba6d-60c829fa0e8e", "output": {"box": [[[48, 10], [135, 10], [135, 28], [48, 28]], [[128, 13], [187, 13], [187, 28], [128, 28]], [[424, 23], [656, 19], [656, 60], [424, 63]], [[706, 18], [820, 15], [821, 57], [707, 59]], [[157, 28], [353, 25], [353, 67], [157, 70]], [[214, 107], [255, 107], [255, 131], [214, 131]], [[342, 105], [385, 105], [385, 128], [342, 128]], [[400, 106], [456, 106], [456, 125], [400, 125]], [[490, 104], [530, 104], [530, 124], [490, 124]], [[546, 104], [613, 104], [613, 122], [546, 122]], [[620, 103], [647, 103], [647, 120], [620, 120]], [[678, 99], [738, 99], [738, 121], [678, 121]], [[753, 98], [802, 98], [802, 117], [753, 117]], [[805, 99], [834, 99], [834, 116], [805, 116]], [[63, 110], [108, 110], [108, 133], [63, 133]], [[119, 111], [191, 108], [191, 130], [119, 132]], [[268, 109], [315, 107], [316, 127], [269, 129]], [[136, 140], [210, 138], [210, 161], [136, 163]], [[342, 177], [405, 174], [406, 196], [343, 198]], [[422, 175], [468, 175], [468, 194], [422, 194]], [[490, 176], [551, 176], [551, 195], [490, 195]], [[569, 174], [614, 174], [614, 193], [569, 193]], [[679, 170], [767, 170], [767, 192], [679, 192]], [[775, 169], [809, 169], [809, 189], [775, 189]], [[67, 181], [128, 178], [129, 201], [68, 203]], [[145, 182], [168, 182], [168, 199], [145, 199]], [[98, 209], [168, 207], [168, 226], [98, 228]], [[89, 230], [202, 227], [202, 248], [89, 252]], [[344, 240], [450, 235], [451, 257], [345, 261]], [[67, 250], [109, 250], [109, 272], [67, 272]], [[125, 253], [171, 253], [171, 268], [125, 268]], [[463, 296], [503, 298], [502, 318], [462, 315]], [[513, 299], [545, 299], [545, 315], [513, 315]], [[551, 298], [577, 298], [577, 315], [551, 315]], [[70, 342], [113, 342], [113, 366], [70, 366]], [[118, 344], [164, 344], [164, 363], [118, 363]], [[489, 453], [511, 453], [511, 470], [489, 470]], [[516, 452], [596, 449], [596, 467], [516, 469]], [[601, 449], [672, 447], [672, 466], [601, 467]], [[676, 447], [779, 444], [779, 465], [676, 467]], [[785, 444], [832, 444], [832, 463], [785, 463]], [[100, 459], [345, 453], [345, 473], [100, 480]], [[361, 454], [417, 454], [417, 472], [361, 472]], [[424, 454], [480, 454], [480, 471], [424, 471]]], "score": [0.5003881454467773, 0.5121922492980957, 0.8410607576370239, 0.9899370074272156, 0.8803550601005554, 0.8953350782394409, 0.6720705628395081, 0.6410766243934631, 0.9981402158737183, 0.9210060834884644, 0.807456374168396, 0.9914864897727966, 0.8868706822395325, 0.8168870210647583, 0.6707069873809814, 0.9028072357177734, 0.8014258742332458, 0.9442926049232483, 0.8741200566291809, 0.6638820171356201, 0.9892856478691101, 0.9861737489700317, 0.8019046187400818, 0.7293807864189148, 0.9992752075195312, 0.7505812048912048, 0.8969690799713135, 0.6176578998565674, 0.7042061686515808, 0.8038582801818848, 0.5054029226303101, 0.9990898370742798, 0.7303234934806824, 0.5139651298522949, 0.6792560815811157, 0.8540811538696289, 0.7028921842575073, 0.8670097589492798, 0.9807087779045105, 0.9929355978965759, 0.6713438630104065, 0.8086974620819092, 0.6298874616622925, 0.6633933186531067], "output": ["image"], "data_type": "image_base64", "additional": [{"full_data": {"english": {"boxes": [[[3, 8], [326, 2], [326, 27], [3, 33]], [[426, 26], [663, 21], [663, 56], [426, 60]], [[645, 18], [819, 18], [819, 54], [645, 54]], [[399, 106], [455, 104], [456, 123], [400, 125]], [[490, 103], [648, 101], [648, 122], [490, 124]], [[751, 99], [833, 97], [833, 114], [751, 117]], [[66, 112], [212, 109], [212, 128], [66, 131]], [[216, 109], [317, 109], [317, 127], [216, 127]], [[232, 138], [327, 136], [327, 158], [232, 160]], [[406, 133], [431, 133], [431, 158], [406, 158]], [[510, 130], [568, 130], [568, 156], [510, 156]], [[83, 141], [216, 138], [216, 159], [83, 162]], [[343, 175], [469, 172], [469, 194], [343, 197]], [[567, 173], [613, 171], [614, 191], [568, 193]], [[678, 170], [810, 167], [810, 189], [678, 192]], [[68, 181], [169, 177], [169, 199], [68, 202]], [[338, 219], [476, 214], [476, 236], [338, 240]], [[508, 216], [552, 216], [552, 235], [508, 235]], [[90, 229], [203, 227], [203, 248], [90, 251]], [[346, 239], [481, 235], [481, 256], [346, 260]], [[67, 251], [173, 248], [173, 269], [67, 271]], [[77, 278], [263, 273], [263, 295], [77, 299]], [[462, 297], [578, 294], [578, 315], [462, 319]], [[103, 314], [209, 310], [209, 334], [103, 337]], [[70, 344], [164, 340], [165, 362], [71, 365]], [[348, 350], [660, 347], [660, 366], [348, 368]], [[100, 458], [831, 443], [831, 464], [100, 479]]], "image": "image", "texts": ["www.997788.com", "BOARDING", "PASS", "CLASS", "SERIALNO", "SEATNO", "FLIGHT", "DATE", "O3DEC", "W", "035", "MU 2379", "FROM", "GATE", "BDT", "TO", "TAIYUAN", "G11", "FUZHOU", "DNO", "NAME", "ZHANGQIWEI", "TKTNO", "SKT1+", "FARE", "ETKT7813699238489/1", "FKIOGATES CLOSE 1OMINUTES BEFORE DEPARTURE TIME"], "scores": [0.931634247303009, 0.996787428855896, 0.9963622689247131, 0.9967449903488159, 0.9658313393592834, 0.9889731407165527, 0.9678511619567871, 0.9887171387672424, 0.9333740472793579, 0.8758131861686707, 0.9991137385368347, 0.9277771711349487, 0.9810319542884827, 0.9970221519470215, 0.8396803736686707, 0.8237050175666809, 0.9972468614578247, 0.8919201493263245, 0.9954496026039124, 0.8357236981391907, 0.9848952293395996, 0.9885503053665161, 0.9231740236282349, 0.5286172032356262, 0.9795136451721191, 0.9920236468315125, 0.9048082828521729]}, "japanese": {"boxes": [[[48, 10], [135, 10], [135, 28], [48, 28]], [[128, 13], [187, 13], [187, 28], [128, 28]], [[424, 23], [656, 19], [656, 60], [424, 63]], [[706, 18], [820, 15], [821, 57], [707, 59]], [[157, 28], [353, 25], [353, 67], [157, 70]], [[214, 107], [255, 107], [255, 131], [214, 131]], [[342, 105], [385, 105], [385, 128], [342, 128]], [[400, 106], [456, 106], [456, 125], [400, 125]], [[490, 104], [530, 104], [530, 124], [490, 124]], [[546, 104], [613, 104], [613, 122], [546, 122]], [[620, 103], [647, 103], [647, 120], [620, 120]], [[678, 99], [738, 99], [738, 121], [678, 121]], [[753, 98], [802, 98], [802, 117], [753, 117]], [[805, 99], [834, 99], [834, 116], [805, 116]], [[63, 110], [108, 110], [108, 133], [63, 133]], [[119, 111], [191, 108], [191, 130], [119, 132]], [[268, 109], [315, 107], [316, 127], [269, 129]], [[136, 140], [210, 138], [210, 161], [136, 163]], [[342, 177], [405, 174], [406, 196], [343, 198]], [[422, 175], [468, 175], [468, 194], [422, 194]], [[490, 176], [551, 176], [551, 195], [490, 195]], [[569, 174], [614, 174], [614, 193], [569, 193]], [[679, 170], [767, 170], [767, 192], [679, 192]], [[775, 169], [809, 169], [809, 189], [775, 189]], [[67, 181], [128, 178], [129, 201], [68, 203]], [[145, 182], [168, 182], [168, 199], [145, 199]], [[98, 209], [168, 207], [168, 226], [98, 228]], [[89, 230], [202, 227], [202, 248], [89, 252]], [[344, 240], [450, 235], [451, 257], [345, 261]], [[67, 250], [109, 250], [109, 272], [67, 272]], [[125, 253], [171, 253], [171, 268], [125, 268]], [[463, 296], [503, 298], [502, 318], [462, 315]], [[513, 299], [545, 299], [545, 315], [513, 315]], [[551, 298], [577, 298], [577, 315], [551, 315]], [[70, 342], [113, 342], [113, 366], [70, 366]], [[118, 344], [164, 344], [164, 363], [118, 363]], [[489, 453], [511, 453], [511, 470], [489, 470]], [[516, 452], [596, 449], [596, 467], [516, 469]], [[601, 449], [672, 447], [672, 466], [601, 467]], [[676, 447], [779, 444], [779, 465], [676, 467]], [[785, 444], [832, 444], [832, 463], [785, 463]], [[100, 459], [345, 453], [345, 473], [100, 480]], [[361, 454], [417, 454], [417, 472], [361, 472]], [[424, 454], [480, 454], [480, 471], [424, 471]]], "image": "image", "texts": ["Uur'a.", "(", "BOA\uff32DING", "\uff30\uff21\uff33\uff33", "\u767b\u673a\u724c", "\u65e5\u671f", "\u8239\u4f4d", "CLAS$", "\u5e8f\u53f7", "SER I AL", "N.", "\u5ea7\u4f4d\u53f7", "SET", "\u5236\u5c71", "\u8ecc\u73ed", "FEIGHT", "DATE", "2379", "\u59cb\u611b\u5730", "FRuh", "\u767b\u673a\u53e3", "GATE", "\u767b\u5374\u55e3\u9762", "BDT", "\u76ee\u7684\u5730", "T0", "\u5bcc\u5c71", "F\u5c71ZH\u7687\u671d", "\u8eab\u4f75\u5225D", "\u59d3\u540d", "N\u5c71MF", "\u7968\u53f7", "T\u6b63T", "N0", "\u7968\u4f75", "FHRE", "10", "MIINUTES", "BEFORE", "DEPARTURE", "TLHE", "\u767b\u673a\u53e3\u5343\u8d77\u4e1e\u524d10\u5206\u7d33\u82f1\u9589", "G\u4e0aTES", "CLUS\u738b"], "scores": [0.5003881454467773, 0.5121922492980957, 0.8410607576370239, 0.9899370074272156, 0.8803550601005554, 0.8953350782394409, 0.6720705628395081, 0.6410766243934631, 0.9981402158737183, 0.9210060834884644, 0.807456374168396, 0.9914864897727966, 0.8868706822395325, 0.8168870210647583, 0.6707069873809814, 0.9028072357177734, 0.8014258742332458, 0.9442926049232483, 0.8741200566291809, 0.6638820171356201, 0.9892856478691101, 0.9861737489700317, 0.8019046187400818, 0.7293807864189148, 0.9992752075195312, 0.7505812048912048, 0.8969690799713135, 0.6176578998565674, 0.7042061686515808, 0.8038582801818848, 0.5054029226303101, 0.9990898370742798, 0.7303234934806824, 0.5139651298522949, 0.6792560815811157, 0.8540811538696289, 0.7028921842575073, 0.8670097589492798, 0.9807087779045105, 0.9929355978965759, 0.6713438630104065, 0.8086974620819092, 0.6298874616622925, 0.6633933186531067]}}}]}, "status": "COMPLETED", "delayTime": 12133, "executionTime": 6361}}}}}}}, "/40": {"post": {"tags": ["microsoft/table-transformer-structure-recognition"], "description": "Recognize the structure of tables in documents", "summary": "Predict with table-transformer-structure-recognition", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/40\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/table-transformer-structure-recognition"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/40?outId={process_id}": {"get": {"tags": ["microsoft/table-transformer-structure-recognition"], "summary": "Get result from table-transformer-structure-recognition", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/40?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/table-transformer-structure-recognition-get"}, "example": {"id": "99cd56cc-873c-471a-b2da-8ab9cae8bf99", "output": {"box": [[15.15, 22.06, 561.27, 205.53]], "score": [0.998], "output": ["table"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 7048, "executionTime": 1713}}}}}}}, "/145": {"post": {"tags": ["fast-segment-anything"], "description": "Fast Segment Anything", "summary": "Predict with fast-segment-anything", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/145\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n  -F \"possible_label=camera, hat, skateboard\" \\\n \n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/fast-segment-anything"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/145?outId={process_id}": {"get": {"tags": ["fast-segment-anything"], "summary": "Get result from fast-segment-anything", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/145?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/fast-segment-anything-get"}, "example": {"id": "571f3075-c678-4b97-b83f-8cfda64fd252", "output": {"box": [[1, 1, 1, 1], [2, 2, 2, 2]], "score": [0.5, 0.4], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 10478, "executionTime": 1786}}}}}}}, "/54": {"post": {"tags": ["keremberke/yolov5m-smoke"], "description": "Smoke detector", "summary": "Predict with yolov5m-smoke", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/54\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolov5m-smoke"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/54?outId={process_id}": {"get": {"tags": ["keremberke/yolov5m-smoke"], "summary": "Get result from yolov5m-smoke", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/54?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolov5m-smoke-get"}, "example": {"id": "0280eded-0b6c-4df2-9966-b278b920b29f", "output": {"box": [[10.109434127807617, 0, 507.5537109375, 328]], "score": [0.6309745907783508], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": [1]}]}, "status": "COMPLETED", "delayTime": 71544, "executionTime": 604}}}}}}}, "/24": {"post": {"tags": ["layoutlm-invoices"], "description": "Extract information from invoice", "summary": "Predict with layoutlm-invoices", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/24\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=What is the invoice number?\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/layoutlm-invoices"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/24?outId={process_id}": {"get": {"tags": ["layoutlm-invoices"], "summary": "Get result from layoutlm-invoices", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/24?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/layoutlm-invoices-get"}, "example": {"id": "dd1bd846-570d-43ac-8614-d7e742bc4dcb", "output": {"box": [], "score": [0.9999815225601196], "output": ["us-001"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 369263, "executionTime": 1389}}}}}}}, "/190": {"post": {"tags": ["sdxl"], "description": "Generate images from prompt with SDXL", "summary": "Predict with sdxl", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/190\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"prompt\": \"An astronaut riding a green horse\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/sdxl"}, "example": {"input": {"prompt": "An astronaut riding a green horse"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/190?outId={process_id}": {"get": {"tags": ["sdxl"], "summary": "Get result from sdxl", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/190?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/sdxl-get"}, "example": {"id": "87a73c2b-7012-4d72-a1fe-ac843b72e0f8", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 317424, "executionTime": 17288}}}}}}}, "/104": {"post": {"tags": ["valhalla/distilbart-mnli-12-3"], "description": "Zero-shot text classifier", "summary": "Predict with distilbart-mnli-12-3", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/104\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.\", \"input_type\": \"text_tags_multiclass\", \"multiclass\": true, \"possible_label\": \"mobile, website, billing, account access\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/distilbart-mnli-12-3"}, "example": {"input": {"input_str": "Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.", "multiclass": true, "possible_label": "mobile, website, billing, account access"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/104?outId={process_id}": {"get": {"tags": ["valhalla/distilbart-mnli-12-3"], "summary": "Get result from distilbart-mnli-12-3", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/104?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/distilbart-mnli-12-3-get"}, "example": {"id": "a8eacf88-0b43-49bc-b030-596c4ad6d1ff", "output": {"box": [], "score": [0.7477878928184509, 0.3762211203575134, 0.31071746349334717, 0.22285695374011993], "output": ["mobile", "billing", "account access", "website"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 7687, "executionTime": 736}}}}}}}, "/193": {"post": {"tags": ["mistral-7b-instruct"], "description": "mistral-7b-instruct", "summary": "Predict with mistral-7b-instruct", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/193\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": [{\"role\": \"system\", \"content\": \"Be precise and concise.\"}, {\"role\": \"user\", \"content\": \"How many stars are there in our galaxy?\"}]}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mistral-7b-instruct"}, "example": {"input": {"input_str": [{"role": "system", "content": "Be precise and concise."}, {"role": "user", "content": "How many stars are there in our galaxy?"}]}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mistral-7b-instruct-res"}, "example": {"id": "518bcfc1-5c2e-4105-bf13-1dd94e237719", "output": {"box": [], "score": [], "output": ["The exact number of stars in our galaxy, the Milky Way, is difficult to determine due to the vastness of space and the fact that we can only see a small fraction of it. However, estimates range from hundreds of billions to over a trillion stars."], "data_type": "text", "additional": [{"usage": {"total_tokens": 73, "prompt_tokens": 17, "completion_tokens": 56}}]}, "status": "", "delayTime": 0, "executionTime": 0}}}}}}}, "/133": {"post": {"tags": ["Controlnet-canny"], "description": "Generate image with control (Canny)", "summary": "Predict with controlnet-canny", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/133\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=bird\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-canny"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/133?outId={process_id}": {"get": {"tags": ["Controlnet-canny"], "summary": "Get result from controlnet-canny", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/133?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-canny-get"}, "example": {"id": "dbd02f65-944f-44e4-abbe-7fb3af3a11cc", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 21942, "executionTime": 12854}}}}}}}, "/151": {"post": {"tags": ["vall-e-x"], "description": "vall-e-x", "summary": "Predict with vall-e-x", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/151\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"prompt\": \"Hey, Traveler, Listen to this, This machine has taken my voice, and now it can talk just like me!\", \"input_str\": \"audio\", \"input_type\": \"audio\", \"transcript\": \"The examination and testimony of the experts enabled the Commission to conclude that five shots may have been fired,\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vall-e-x"}, "example": {"input": {"prompt": "Hey, Traveler, Listen to this, This machine has taken my voice, and now it can talk just like me!", "input_str": "audio", "transcript": "The examination and testimony of the experts enabled the Commission to conclude that five shots may have been fired,"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/151?outId={process_id}": {"get": {"tags": ["vall-e-x"], "summary": "Get result from vall-e-x", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/151?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vall-e-x-get"}, "example": {"id": "4fabecfe-ef40-4823-95d1-763650c97dc3", "output": {"box": [], "score": [], "output": ["https://runpod-results.s3.amazonaws.com/suno-ai-bark/vall-e-x/56a2f30f-bd2f-4274-bf38-33e9f0643df1.wav?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAXUA7OB55IHIQPVPX%2F20230902%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230902T024303Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=8837f3d5ebf62d2c24f31a82dbb66191aa48527ca34532e6e080451f5ace37a3"], "data_type": "audio_s3", "additional": []}, "status": "COMPLETED", "delayTime": 13464, "executionTime": 5638}}}}}}}, "/4": {"post": {"tags": ["Whisper"], "description": "Speech to text", "summary": "Predict with whisper", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/4\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"https://audio-samples.github.io/samples/mp3/blizzard_biased/sample-0.mp3\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/whisper"}, "example": {"input": {"input_str": "https://audio-samples.github.io/samples/mp3/blizzard_biased/sample-0.mp3"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/4?outId={process_id}": {"get": {"tags": ["Whisper"], "summary": "Get result from whisper", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/4?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/whisper-get"}, "example": {"id": "29c60bb3-5f70-42dd-85db-ef4072f7d088-u1", "output": {"box": [], "score": [], "output": [{"id": 0, "end": 5.76, "seek": 0, "text": " Perhaps he made up to the party afterwards and took her and his heart at end continued.", "start": 0, "tokens": [50364, 10517, 415, 1027, 493, 281, 264, 3595, 10543, 293, 1890, 720, 293, 702, 1917, 412, 917, 7014, 13, 50652], "avg_logprob": -0.3495705321028426, "temperature": 0, "no_speech_prob": 0.009553784504532814, "compression_ratio": 1.2314814814814814}, {"id": 1, "end": 9.48, "seek": 0, "text": " It was not theorized, set it over her.", "start": 5.76, "tokens": [50652, 467, 390, 406, 27423, 1602, 11, 992, 309, 670, 720, 13, 50838], "avg_logprob": -0.3495705321028426, "temperature": 0, "no_speech_prob": 0.009553784504532814, "compression_ratio": 1.2314814814814814}], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 34166, "executionTime": 3435}}}}}}}, "/86": {"post": {"tags": ["ckiplab/bert-base-chinese-ner"], "description": "Extract entity from text(Chinese)", "summary": "Predict with bert-base-chinese-ner", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/86\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"\\u6211\\u53eb\\u8428\\u62c9\\uff0c\\u6211\\u4f4f\\u5728\\u4f26\\u6566\\u3002\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/bert-base-chinese-ner"}, "example": {"input": {"input_str": "\u6211\u53eb\u8428\u62c9\uff0c\u6211\u4f4f\u5728\u4f26\u6566\u3002"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/86?outId={process_id}": {"get": {"tags": ["ckiplab/bert-base-chinese-ner"], "summary": "Get result from bert-base-chinese-ner", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/86?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/bert-base-chinese-ner-get"}, "example": {"id": "027e65a6-9d35-4eda-860b-90c6b1ff44b8", "output": {"box": [], "score": [0.04742075875401497, 0.047555334866046906, 0.03239244222640991, 0.04414321482181549, 0.045149095356464386, 0.04886113479733467, 0.05155876651406288, 0.050095636397600174, 0.02861616015434265, 0.042885009199380875, 0.04037574306130409], "output": ["S-WORK_OF_ART", "S-WORK_OF_ART", "E-DATE", "S-LOC", "S-WORK_OF_ART", "S-WORK_OF_ART", "S-WORK_OF_ART", "S-WORK_OF_ART", "S-DATE", "B-CARDINAL", "S-WORK_OF_ART"], "data_type": "text", "additional": [{"end": 1, "word": "\u6211", "start": 0}, {"end": 2, "word": "\u53eb", "start": 1}, {"end": 3, "word": "\u8428", "start": 2}, {"end": 4, "word": "\u62c9", "start": 3}, {"end": 5, "word": "\uff0c", "start": 4}, {"end": 6, "word": "\u6211", "start": 5}, {"end": 7, "word": "\u4f4f", "start": 6}, {"end": 8, "word": "\u5728", "start": 7}, {"end": 9, "word": "\u4f26", "start": 8}, {"end": 10, "word": "\u6566", "start": 9}, {"end": 11, "word": "\u3002", "start": 10}]}, "status": "COMPLETED", "delayTime": 7241, "executionTime": 713}}}}}}}, "/78": {"post": {"tags": ["nbroad/ESG-BERT"], "description": "Classify text into ESG topic", "summary": "Predict with esg-bert", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/78\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"In fiscal year 2019, we reduced our comprehensive carbon footprint for the fourth consecutive year\\u2014down 35 percent compared to 2015, when Apple\\u2019s carbon emissions peaked, even as net revenue increased by 11 percent over that same period. In the past year, we avoided over 10 million metric tons from our emissions reduction initiatives\\u2014like our Supplier Clean Energy Program, which lowered our footprint by 4.4 million metric tons. \", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/esg-bert"}, "example": {"input": {"input_str": "In fiscal year 2019, we reduced our comprehensive carbon footprint for the fourth consecutive year\u2014down 35 percent compared to 2015, when Apple\u2019s carbon emissions peaked, even as net revenue increased by 11 percent over that same period. In the past year, we avoided over 10 million metric tons from our emissions reduction initiatives\u2014like our Supplier Clean Energy Program, which lowered our footprint by 4.4 million metric tons. "}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/78?outId={process_id}": {"get": {"tags": ["nbroad/ESG-BERT"], "summary": "Get result from esg-bert", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/78?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/esg-bert-get"}, "example": {"id": "1f227963-670c-4edb-b12a-b626efd1d6f1", "output": {"box": [], "score": [0.7454295754432678], "output": ["GHG_Emissions"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 6831, "executionTime": 926}}}}}}}, "/12": {"post": {"tags": ["vit-gpt2-image-captioning"], "description": "Generate description from an image", "summary": "Predict with vit-gpt2-image-captioning", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/12\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/vit-gpt2-image-captioning"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/12?outId={process_id}": {"get": {"tags": ["vit-gpt2-image-captioning"], "summary": "Get result from vit-gpt2-image-captioning", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/12?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vit-gpt2-image-captioning-get"}, "example": {"id": "f0c7a40c-9111-4b22-9240-bebd92f38a9d", "output": {"box": [], "score": [], "output": ["airplanes parked on the tarmac at an airport"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 10818, "executionTime": 1982}}}}}}}, "/72": {"post": {"tags": ["cardiffnlp/twitter-roberta-base-sentiment-latest"], "description": "Tweet sentiment analysis", "summary": "Predict with twitter-roberta-base-sentiment-latest", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/72\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Covid cases are increasing fast!\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/twitter-roberta-base-sentiment-latest"}, "example": {"input": {"input_str": "Covid cases are increasing fast!"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/72?outId={process_id}": {"get": {"tags": ["cardiffnlp/twitter-roberta-base-sentiment-latest"], "summary": "Get result from twitter-roberta-base-sentiment-latest", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/72?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/twitter-roberta-base-sentiment-latest-get"}, "example": {"id": "4731d25e-d11f-4ebc-81f0-7a71e984b998", "output": {"box": [], "score": [0.723576545715332], "output": ["negative"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 8125, "executionTime": 766}}}}}}}, "/70": {"post": {"tags": ["distilbert-base-uncased-finetuned-sst-2-english"], "description": "Sentiment analysis", "summary": "Predict with distilbert-base-uncased-finetuned-sst-2-english", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/70\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"I like you. I love you\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/distilbert-base-uncased-finetuned-sst-2-english"}, "example": {"input": {"input_str": "I like you. I love you"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/70?outId={process_id}": {"get": {"tags": ["distilbert-base-uncased-finetuned-sst-2-english"], "summary": "Get result from distilbert-base-uncased-finetuned-sst-2-english", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/70?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/distilbert-base-uncased-finetuned-sst-2-english-get"}, "example": {"id": "8efb05c6-128b-4162-8eae-cdd6785af5f8", "output": {"box": [], "score": [], "output": ["LABEL_0"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 21565, "executionTime": 942}}}}}}}, "/60": {"post": {"tags": ["maskformer-swin-base-coco"], "description": "Object detection and instance segmentation", "summary": "Predict with maskformer-swin-base-coco", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/60\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/maskformer-swin-base-coco"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/60?outId={process_id}": {"get": {"tags": ["maskformer-swin-base-coco"], "summary": "Get result from maskformer-swin-base-coco", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/60?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/maskformer-swin-base-coco-get"}, "example": {"id": "9d778526-ede4-42a4-ab09-f6c49b97cc54", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 115986, "executionTime": 2378}}}}}}}, "/88": {"post": {"tags": ["ml6team/keyphrase-extraction-kbir-inspec"], "description": "Extract keyphrases from text", "summary": "Predict with keyphrase-extraction-kbir-inspec", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/88\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Keyphrase extraction is a technique in text analysis where you extract the important keyphrases from a document. Thanks to these keyphrases humans can understand the content of a text very quickly and easily without reading it completely. Keyphrase extraction was first done primarily by human annotators, who read the text in detail and then wrote down the most important keyphrases. The disadvantage is that if you work with a lot of documents, this process can take a lot of time.  Here is where Artificial Intelligence comes in. Currently, classical machine learning methods, that use statistical and linguistic features, are widely used for the extraction process. Now with deep learning, it is possible to capture the semantic meaning of a text even better than these classical methods. Classical methods look at the frequency, occurrence and order of words in the text, whereas these neural approaches can capture long-term semantic dependencies and context of words in a text.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/keyphrase-extraction-kbir-inspec"}, "example": {"input": {"input_str": "Keyphrase extraction is a technique in text analysis where you extract the important keyphrases from a document. Thanks to these keyphrases humans can understand the content of a text very quickly and easily without reading it completely. Keyphrase extraction was first done primarily by human annotators, who read the text in detail and then wrote down the most important keyphrases. The disadvantage is that if you work with a lot of documents, this process can take a lot of time.  Here is where Artificial Intelligence comes in. Currently, classical machine learning methods, that use statistical and linguistic features, are widely used for the extraction process. Now with deep learning, it is possible to capture the semantic meaning of a text even better than these classical methods. Classical methods look at the frequency, occurrence and order of words in the text, whereas these neural approaches can capture long-term semantic dependencies and context of words in a text."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/88?outId={process_id}": {"get": {"tags": ["ml6team/keyphrase-extraction-kbir-inspec"], "summary": "Get result from keyphrase-extraction-kbir-inspec", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/88?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/keyphrase-extraction-kbir-inspec-get"}, "example": {"id": "2355707d-0b9b-43cf-9c8f-83acc0defc2f", "output": {"box": [], "score": [], "output": ["Artificial Intelligence", "Keyphrase extraction", "deep learning", "linguistic features", "machine learning", "semantic meaning", "text analysis"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 11391, "executionTime": 1213}}}}}}}, "/26": {"post": {"tags": ["Intel/dpt-large"], "description": "Estimate depth from image", "summary": "Predict with dpt-large", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/26\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/dpt-large"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/26?outId={process_id}": {"get": {"tags": ["Intel/dpt-large"], "summary": "Get result from dpt-large", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/26?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/dpt-large-get"}, "example": {"id": "10c77f40-6104-42b9-83f9-9c476651f599", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 9692, "executionTime": 2165}}}}}}}, "/30": {"post": {"tags": ["nateraw/vit-age-classifier"], "description": "Guess age group of a person", "summary": "Predict with vit-age-classifier", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/30\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/vit-age-classifier"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/30?outId={process_id}": {"get": {"tags": ["nateraw/vit-age-classifier"], "summary": "Get result from vit-age-classifier", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/30?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/vit-age-classifier-get"}, "example": {"id": "f4f75c83-c0fe-400e-b471-b6dd87a8758f", "output": {"box": [], "score": [], "output": ["30-39"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 6944, "executionTime": 1654}}}}}}}, "/22": {"post": {"tags": ["layoutlm-document-qa"], "description": "Ask questions from your image document", "summary": "Predict with layoutlm-document-qa", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/22\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=What is the purchase amount?\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/layoutlm-document-qa"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/22?outId={process_id}": {"get": {"tags": ["layoutlm-document-qa"], "summary": "Get result from layoutlm-document-qa", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/22?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/layoutlm-document-qa-get"}, "example": {"id": "c5afcf29-3ab0-44cb-b05e-65348785e436", "output": {"box": [], "score": [0.9998503923416138], "output": ["$1,000,000,000"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 225793, "executionTime": 2340}}}}}}}, "/196": {"post": {"tags": ["sdxl-base"], "description": "None", "summary": "Predict with sdxl-base", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/196\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Astronaut riding a horse\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/sdxl-base"}, "example": {"input": {"input_str": "Astronaut riding a horse"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/sdxl-base-res"}, "example": {"id": "", "output": {"box": [], "score": [], "output": [""], "data_type": "image_base64", "additional": []}, "status": "", "delayTime": 0, "executionTime": 0}}}}}}}, "/16": {"post": {"tags": ["trocr-base-handwritten"], "description": "Handwritten text recognition", "summary": "Predict with trocr-base-handwritten", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/16\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/trocr-base-handwritten"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/16?outId={process_id}": {"get": {"tags": ["trocr-base-handwritten"], "summary": "Get result from trocr-base-handwritten", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/16?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/trocr-base-handwritten-get"}, "example": {"id": "d54436fe-3bf3-4fb8-9a72-4424f589f12e", "output": {"box": [], "score": [], "output": ["\" Will you pour your own, please, and"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 18060, "executionTime": 2411}}}}}}}, "/36": {"post": {"tags": ["hustvl/yolos-tiny"], "description": "Fast object detection", "summary": "Predict with yolos-tiny", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/36\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolos-tiny"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/36?outId={process_id}": {"get": {"tags": ["hustvl/yolos-tiny"], "summary": "Get result from yolos-tiny", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/36?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolos-tiny-get"}, "example": {"id": "6e3616b8-731f-4ec0-a76f-81a034667e15", "output": {"box": [[278.48, 195.16, 360.6, 219.42], [381.71, 198.08, 465.59, 265.45], [221.94, 226.58, 235.09, 264.23], [461.45, 144.41, 639.31, 414.62]], "score": [0.982, 0.952, 0.995, 0.99], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": ["airplane", "bus", "person", "bus"]}]}, "status": "COMPLETED", "delayTime": 54269, "executionTime": 205}}}}}}}, "/80": {"post": {"tags": ["martin-ha/toxic-comment-model"], "description": "Detect toxic comments in text", "summary": "Predict with toxic-comment-model", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/80\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"This is a test text.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/toxic-comment-model"}, "example": {"input": {"input_str": "This is a test text."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/80?outId={process_id}": {"get": {"tags": ["martin-ha/toxic-comment-model"], "summary": "Get result from toxic-comment-model", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/80?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/toxic-comment-model-get"}, "example": {"id": "199a4630-4702-463f-8fe3-b93c9cd484c7", "output": {"box": [], "score": [0.9990898370742798], "output": ["non-toxic"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 6698, "executionTime": 702}}}}}}}, "/32": {"post": {"tags": ["google/owlvit-base-patch32"], "description": "Ask AI to classify image to categories you defined", "summary": "Predict with owlvit-base-patch32", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/32\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n  -F \"possible_label=['a photo of a cat', 'a photo of a dog']\" \\\n \n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/owlvit-base-patch32"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/32?outId={process_id}": {"get": {"tags": ["google/owlvit-base-patch32"], "summary": "Get result from owlvit-base-patch32", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/32?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/owlvit-base-patch32-get"}, "example": {"id": "1a63fbea-ed44-409e-8a56-f7b740d0d72d", "output": {"box": [[324.97, 20.44, 640.58, 373.29], [1.46, 55.26, 315.55, 472.17]], "score": [0.707, 0.717], "output": ["a photo of a cat", "a photo of a cat"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 8228, "executionTime": 2311}}}}}}}, "/134": {"post": {"tags": ["Controlnet-depth"], "description": "Generate image with control (Depth)", "summary": "Predict with controlnet-depth", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/134\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=Stormtrooper's lecture\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-depth"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/134?outId={process_id}": {"get": {"tags": ["Controlnet-depth"], "summary": "Get result from controlnet-depth", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/134?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-depth-get"}, "example": {"id": "a9eaa150-1b57-4010-8f99-dea46498fd9a", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 38417, "executionTime": 7856}}}}}}}, "/136": {"post": {"tags": ["Controlnet-mlsd"], "description": "Generate image with control (M-LSD)", "summary": "Predict with controlnet-mlsd", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/136\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=room\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-mlsd"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/136?outId={process_id}": {"get": {"tags": ["Controlnet-mlsd"], "summary": "Get result from controlnet-mlsd", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/136?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-mlsd-get"}, "example": {"id": "338e1554-9397-48b9-95b3-dc91b749c1bc", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 11371, "executionTime": 6628}}}}}}}, "/197": {"post": {"tags": ["easyocr-model"], "description": "OCR clean", "summary": "Predict with easyocr-model", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/197\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"language=en\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/easyocr-model"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/197?outId={process_id}": {"get": {"tags": ["easyocr-model"], "summary": "Get result from easyocr-model", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/197?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/easyocr-model-get"}, "example": {"id": "22a54d34-ee47-4e9e-a44c-348dddc42681-e1", "output": {"box": [[[19, 35], [121, 35], [121, 79], [19, 79]], [[161, 39], [383, 39], [383, 77], [161, 77]], [[461, 36], [1191, 36], [1191, 81], [461, 81]], [[19, 86], [1274, 86], [1274, 135], [19, 135]], [[23, 141], [921, 141], [921, 185], [23, 185]], [[937, 141], [1373, 141], [1373, 185], [937, 185]], [[20, 191], [1234, 191], [1234, 239], [20, 239]], [[20, 244], [1375, 244], [1375, 287], [20, 287]], [[21, 299], [459, 299], [459, 335], [21, 335]], [[23, 382], [1351, 382], [1351, 425], [23, 425]], [[21, 432], [1347, 432], [1347, 477], [21, 477]], [[21, 486], [532, 486], [532, 530], [21, 530]], [[19, 565], [1257, 565], [1257, 614], [19, 614]], [[21, 619], [1366, 619], [1366, 667], [21, 667]], [[21, 673], [1339, 673], [1339, 717], [21, 717]], [[18, 724], [1269, 724], [1269, 767], [18, 767]], [[18, 773], [1368, 773], [1368, 823], [18, 823]], [[18, 823], [920, 823], [920, 874], [18, 874]], [[995, 831], [1363, 831], [1363, 873], [995, 873]], [[383.56408368276453, 42.26661757518776], [457.4207913262161, 36.926793135626625], [459.43591631723547, 75.73338242481223], [384.5792086737839, 81.07320686437338]], [[919.5144372945836, 834.286093236459], [993.4207913262161, 828.9267931356267], [995.4855627054164, 866.713906763541], [920.5792086737839, 873.0732068643733]]], "score": [0.9999435957003707, 0.8238194196355783, 0.756580447137365, 0.7443800690886677, 0.8612622701622986, 0.7423349920402619, 0.6844377684766633, 0.9349099736213771, 0.7376112395782498, 0.6828765123346197, 0.8024260374976069, 0.9034096277385537, 0.5469501211828564, 0.7710497775347921, 0.4792564275033408, 0.6142218864122763, 0.6335683537688406, 0.7705991575099215, 0.6640427397319505, 0.9999977350234985, 0.9999983906745911], "output": ["(CNN)", "Phantom limb", "is a common problem for people who undergo", "amputation, and so is the ability to function even with a regular prosthetic, but a", "medical advance that sounds like it comes straight out of", "Star Wars\" is giving at least", "one woman significant relief from that pain: She now has a functioning bionic", "prosthetic hand that can feel some sensations and help her do about 80% of what she", "used to do with both hands:", "While Luke Skywalker's human-like bionic hand is still years away, scientists say they", "are a step closer with this newest prosthetic technique, and doctors hope others will", "soon benefit from this approach:", "Karin, whose full name is not disclosed in the proof of concept study published", "Wednesday in the medical journal Science Robot; had been using a regular prosthetic", "hand for years; but it was hard to control: And as with even the most technologically", "advanced prosthetics on the market; it was uncomfortable and sometimes even", "painful to use. On top of that; the Swedish 50-year-old, who lost her hand in a farming", "accident; had been living with excruciating phantom Iimb", "for more than 20 years:", "pain", "pain"], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 114212, "executionTime": 4924}}}}}}}, "/137": {"post": {"tags": ["Controlnet-normal"], "description": "Generate image with control (Normal Map)", "summary": "Predict with controlnet-normal", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/137\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=cute toy\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-normal"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/137?outId={process_id}": {"get": {"tags": ["Controlnet-normal"], "summary": "Get result from controlnet-normal", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/137?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-normal-get"}, "example": {"id": "fce4ed95-da8b-479a-9758-3abba1cb8950", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 31078, "executionTime": 9338}}}}}}}, "/46": {"post": {"tags": ["keremberke/yolov8m-table-extraction"], "description": "Extract tables from documents with high accuracy", "summary": "Predict with yolov8m-table-extraction", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/46\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolov8m-table-extraction"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/46?outId={process_id}": {"get": {"tags": ["keremberke/yolov8m-table-extraction"], "summary": "Get result from yolov8m-table-extraction", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/46?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolov8m-table-extraction-get"}, "example": {"id": "41f508a1-d435-4705-8c96-50d9feab100b", "output": {"box": [[54, 398, 697, 539], [55, 398, 700, 538]], "score": [0.5058751106262207, 0.2670725882053375], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": [0, 1]}]}, "status": "COMPLETED", "delayTime": 207107, "executionTime": 4537}}}}}}}, "/135": {"post": {"tags": ["Controlnet-hed"], "description": "Generate image with control (HED)", "summary": "Predict with controlnet-hed", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/135\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=oil painting of handsome old man, masterpiece\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-hed"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/135?outId={process_id}": {"get": {"tags": ["Controlnet-hed"], "summary": "Get result from controlnet-hed", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/135?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-hed-get"}, "example": {"id": "0af8613e-3fee-4509-8e17-4bc9b5d7f82e", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 20715, "executionTime": 6834}}}}}}}, "/42": {"post": {"tags": ["nickmuchi/yolos-small-finetuned-license-plate-detection"], "description": "Detect license plates in images", "summary": "Predict with yolos-small-finetuned-license-plate-detection", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/42\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolos-small-finetuned-license-plate-detection"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/42?outId={process_id}": {"get": {"tags": ["nickmuchi/yolos-small-finetuned-license-plate-detection"], "summary": "Get result from yolos-small-finetuned-license-plate-detection", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/42?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolos-small-finetuned-license-plate-detection-get"}, "example": {"id": "e4db7d32-ba14-4b14-bbcc-d3badd804e2b", "output": {"box": [[589.14, 390.47, 620.13, 405.3], [421.03, 249.81, 439.54, 257.1], [482.19, 350.21, 507.25, 373.14]], "score": [0.965, 0.969, 0.966], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": ["license-plates", "license-plates", "license-plates"]}]}, "status": "COMPLETED", "delayTime": 155714, "executionTime": 1417}}}}}}}, "/139": {"post": {"tags": ["Controlnet-scribble"], "description": "Generate image with control (Scribble)", "summary": "Predict with controlnet-scribble", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/139\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=bag\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-scribble"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/139?outId={process_id}": {"get": {"tags": ["Controlnet-scribble"], "summary": "Get result from controlnet-scribble", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/139?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-scribble-get"}, "example": {"id": "5d812395-a228-4bce-8270-cb71935227fd", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 16101, "executionTime": 8783}}}}}}}, "/138": {"post": {"tags": ["Controlnet-openpose"], "description": "Generate image with control (HumanPose)", "summary": "Predict with controlnet-openpose", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/138\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=chef in the kitchen\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-openpose"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/138?outId={process_id}": {"get": {"tags": ["Controlnet-openpose"], "summary": "Get result from controlnet-openpose", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/138?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-openpose-get"}, "example": {"id": "826a3c19-9370-403f-afc1-e0001ea76e5a", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 26011, "executionTime": 8440}}}}}}}, "/94": {"post": {"tags": ["krinal214/bert-zero-shot"], "description": "Answer question based on the provided context (multilingual support)", "summary": "Predict with bert-zero-shot", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/94\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"prompt\": \"Who was Jim Henson?\", \"input_str\": \"Jim Henson was a nice puppet\", \"input_type\": \"text_prompt\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/bert-zero-shot"}, "example": {"input": {"prompt": "Who was Jim Henson?", "input_str": "Jim Henson was a nice puppet"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/94?outId={process_id}": {"get": {"tags": ["krinal214/bert-zero-shot"], "summary": "Get result from bert-zero-shot", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/94?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/bert-zero-shot-get"}, "example": {"id": "5073c243-af86-4b2d-b708-1c932c5e4217", "output": {"box": [], "score": [], "output": ["a nice puppet"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 451204, "executionTime": 1034}}}}}}}, "/74": {"post": {"tags": ["papluca/xlm-roberta-base-language-detection"], "description": "Detect the language of text", "summary": "Predict with xlm-roberta-base-language-detection", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/74\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"A new model offers an explanation for how the Galilean satellites formed around the solar system\\u2019s largest world. Konstantin Batygin did not set out to solve one of the solar system\\u2019s most puzzling mysteries when he went for a run up a hill in Nice, France. Dr. Batygin, a Caltech researcher, best known for his contributions to the search for the solar system\\u2019s missing \\u201cPlanet Nine,\\u201d spotted a beer bottle. At a steep, 20 degree grade, he wondered why it wasn\\u2019t rolling down the hill. He realized there was a breeze at his back holding the bottle in place. Then he had a thought that would only pop into the mind of a theoretical astrophysicist: \\u201cOh! This is how Europa formed.\\u201d Europa is one of Jupiter\\u2019s four large Galilean moons. And in a paper published Monday in the Astrophysical Journal, Dr. Batygin and a co-author, Alessandro Morbidelli, a planetary scientist at the C\\u00f4te d\\u2019Azur Observatory in France, present a theory explaining how some moons form around gas giants like Jupiter and Saturn, suggesting that millimeter-sized grains of hail produced during the solar system\\u2019s formation became trapped around these massive worlds, taking shape one at a time into the potentially habitable moons we know today.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/xlm-roberta-base-language-detection"}, "example": {"input": {"input_str": "A new model offers an explanation for how the Galilean satellites formed around the solar system\u2019s largest world. Konstantin Batygin did not set out to solve one of the solar system\u2019s most puzzling mysteries when he went for a run up a hill in Nice, France. Dr. Batygin, a Caltech researcher, best known for his contributions to the search for the solar system\u2019s missing \u201cPlanet Nine,\u201d spotted a beer bottle. At a steep, 20 degree grade, he wondered why it wasn\u2019t rolling down the hill. He realized there was a breeze at his back holding the bottle in place. Then he had a thought that would only pop into the mind of a theoretical astrophysicist: \u201cOh! This is how Europa formed.\u201d Europa is one of Jupiter\u2019s four large Galilean moons. And in a paper published Monday in the Astrophysical Journal, Dr. Batygin and a co-author, Alessandro Morbidelli, a planetary scientist at the C\u00f4te d\u2019Azur Observatory in France, present a theory explaining how some moons form around gas giants like Jupiter and Saturn, suggesting that millimeter-sized grains of hail produced during the solar system\u2019s formation became trapped around these massive worlds, taking shape one at a time into the potentially habitable moons we know today."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/74?outId={process_id}": {"get": {"tags": ["papluca/xlm-roberta-base-language-detection"], "summary": "Get result from xlm-roberta-base-language-detection", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/74?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/xlm-roberta-base-language-detection-get"}, "example": {"id": "20338e75-2c12-4ad3-8f79-0d21ca8c5ff3", "output": {"box": [], "score": [0.9376141428947449], "output": ["en"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 9613, "executionTime": 731}}}}}}}, "/140": {"post": {"tags": ["Controlnet-seg"], "description": "Generate image with control (Seg)", "summary": "Predict with controlnet-seg", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/140\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=house\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/controlnet-seg"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/140?outId={process_id}": {"get": {"tags": ["Controlnet-seg"], "summary": "Get result from controlnet-seg", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/140?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/controlnet-seg-get"}, "example": {"id": "191c61c8-288a-4334-8890-6a1ce79d0993", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 10559, "executionTime": 6204}}}}}}}, "/52": {"post": {"tags": ["keremberke/yolov5m-aerial-sheep"], "description": "Count livestock from drone images", "summary": "Predict with yolov5m-aerial-sheep", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/52\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolov5m-aerial-sheep"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/52?outId={process_id}": {"get": {"tags": ["keremberke/yolov5m-aerial-sheep"], "summary": "Get result from yolov5m-aerial-sheep", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/52?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolov5m-aerial-sheep-get"}, "example": {"id": "245205a5-c235-4c93-8984-eda8de9a3925", "output": {"box": [[748.1644897460938, 0.98598712682724, 851.4412231445312, 139.43295288085938], [592.2642211914062, 44.867496490478516, 674.0306396484375, 92.3136215209961], [144.62445068359375, 90.02764129638672, 265.3022155761719, 243.42520141601562], [286.8462829589844, 18.296815872192383, 414.011474609375, 124.23201751708984], [362.40679931640625, 17.72300910949707, 428.2760925292969, 114.29322814941406], [635.36376953125, 145.09317016601562, 748.7760620117188, 259.65411376953125], [143.46888732910156, 218.3687286376953, 195.52609252929688, 300.5218505859375], [643.8408203125, 125.71057891845703, 706.5503540039062, 176.34226989746094]], "score": [0.7986444234848022, 0.7087119817733765, 0.6010277271270752, 0.5480892658233643, 0.5478705763816833, 0.5051766037940979, 0.3331335484981537, 0.3020903468132019], "output": [1, 1, 1, 1, 1, 1, 1, 1], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 9907, "executionTime": 940}}}}}}}, "/18": {"post": {"tags": ["donut-base"], "description": "Classify documents(in image format)", "summary": "Predict with donut-base", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/18\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"prompt=What is the invoice number?\" \\\n   -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/donut-base"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/18?outId={process_id}": {"get": {"tags": ["donut-base"], "summary": "Get result from donut-base", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/18?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/donut-base-get"}, "example": {"id": "5b5e29e2-9777-49a0-99e1-3a9b32c34a4e", "output": {"box": [], "score": [], "output": [{"answer": "us-001", "question": "What is the invoice number?"}], "data_type": "image_text", "additional": []}, "status": "COMPLETED", "delayTime": 166407, "executionTime": 3907}}}}}}}, "/82": {"post": {"tags": ["d4data/biomedical-ner-all"], "description": "Recognise biomedical entities", "summary": "Predict with biomedical-ner-all", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/82\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"The patient reported no recurrence of palpitations at follow-up 6 months after the ablation.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/biomedical-ner-all"}, "example": {"input": {"input_str": "The patient reported no recurrence of palpitations at follow-up 6 months after the ablation."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/82?outId={process_id}": {"get": {"tags": ["d4data/biomedical-ner-all"], "summary": "Get result from biomedical-ner-all", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/82?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/biomedical-ner-all-get"}, "example": {"id": "0bccd462-d36e-4858-a653-e64e62288a08", "output": {"box": [], "score": [0.9999310970306396, 0.9063321352005005, 0.9997554421424866, 0.9998670220375061], "output": ["Sign_symptom", "Sign_symptom", "Clinical_event", "Date"], "data_type": "text", "additional": [{"end": 41, "word": "pal", "start": 38}, {"end": 50, "word": "##pitations", "start": 41}, {"end": 60, "word": "follow", "start": 54}, {"end": 78, "word": "6 months after", "start": 64}]}, "status": "COMPLETED", "delayTime": 233420, "executionTime": 689}}}}}}}, "/126": {"post": {"tags": ["rendchevi/nix-tts"], "description": "Text to Speech", "summary": "Predict with nix-tts", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/126\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Born to multiply, born to gaze into night skies.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/nix-tts"}, "example": {"input": {"input_str": "Born to multiply, born to gaze into night skies."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/126?outId={process_id}": {"get": {"tags": ["rendchevi/nix-tts"], "summary": "Get result from nix-tts", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/126?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/nix-tts-get"}, "example": {"id": "d364a69b-8a17-494a-875d-cc0ab37c66d1", "input": {"input_str": "**When conwoman Melissa Caddick vanished from her luxurious eastern Sydney home in November 2020 - with only her partially decomposed foot found washed up on a beach months later - it set off a frenzy in Australia.** The case blindsided investors, baffled police, and captured the imagination of a nation. ", "input_type": "text"}, "output": {"box": [], "score": [], "output": ["http://s3.amazonaws.com/runpod-test-524/runpod-tmp/cd9e81bc-7f91-4103-8e3f-01017f414c07.wav?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIATGT26DYU2ECVDXGH%2F20230525%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230525T050304Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=634846daba96fce5a6755e03c96ad14c29dea0baef9203085d8f3910be202ddd"], "data_type": "audio_s3", "additional": []}, "status": "COMPLETED", "delayTime": 4165, "executionTime": 10251}}}}}}}, "/148": {"post": {"tags": ["skin-retouch"], "description": "Beautify the skin of a portrait", "summary": "Predict with skin-retouch", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/148\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/skin-retouch"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/148?outId={process_id}": {"get": {"tags": ["skin-retouch"], "summary": "Get result from skin-retouch", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/148?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/skin-retouch-get"}, "example": {"id": "41023c8f-da22-4d09-a1b9-e74c18c82bac", "output": {"box": [], "score": [], "output": ["image"], "data_type": "image_base64", "additional": []}, "status": "COMPLETED", "delayTime": 162632, "executionTime": 6865}}}}}}}, "/84": {"post": {"tags": ["Davlan/bert-base-multilingual-cased-ner-hrl"], "description": "Recognise entity in multiple languages", "summary": "Predict with bert-base-multilingual-cased-ner-hrl", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/84\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/bert-base-multilingual-cased-ner-hrl"}, "example": {"input": {"input_str": "Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute."}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/84?outId={process_id}": {"get": {"tags": ["Davlan/bert-base-multilingual-cased-ner-hrl"], "summary": "Get result from bert-base-multilingual-cased-ner-hrl", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/84?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/bert-base-multilingual-cased-ner-hrl-get"}, "example": {"id": "7206d52d-3ca2-4601-8ab8-96f8b0ae6e69", "output": {"box": [], "score": [0.9997156262397766, 0.9816160202026367, 0.9997740387916565, 0.9998015761375427, 0.9997687935829163, 0.9997319579124451], "output": ["B-PER", "I-PER", "I-PER", "I-PER", "I-PER", "B-LOC"], "data_type": "text", "additional": [{"end": 3, "word": "Nad", "start": 0}, {"end": 5, "word": "##er", "start": 3}, {"end": 8, "word": "Jo", "start": 6}, {"end": 11, "word": "##kha", "start": 8}, {"end": 14, "word": "##dar", "start": 11}, {"end": 30, "word": "Syria", "start": 25}]}, "status": "COMPLETED", "delayTime": 402362, "executionTime": 583}}}}}}}, "/186": {"post": {"tags": ["llama-2-70b-chat-hf"], "description": "huggingface llama-2-70b-chat-hf", "summary": "Predict with llama-2-70b-chat-hf", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/186\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"In a surprising turn of events, \"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/llama-2-70b-chat-hf"}, "example": {"input": {"input_str": "In a surprising turn of events, "}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/llama-2-70b-chat-hf-res"}, "example": {"id": "", "output": {"box": [], "score": [], "output": ["In a surprising turn of events, 20th Century Fox has released a new trailer for Ridley Scott's Alien"], "data_type": "text", "additional": []}, "status": "", "delayTime": 0, "executionTime": 0}}}}}}}, "/50": {"post": {"tags": ["keremberke/yolov5n-construction-safety"], "description": "Construction safety", "summary": "Predict with yolov5n-construction-safety", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/50\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -F \"image=@test_image.jpeg;type=image/jpeg\" \\\n\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/yolov5n-construction-safety"}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/50?outId={process_id}": {"get": {"tags": ["keremberke/yolov5n-construction-safety"], "summary": "Get result from yolov5n-construction-safety", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/50?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/yolov5n-construction-safety-get"}, "example": {"id": "331c867a-6013-4d53-a8d3-048498e876a6", "output": {"box": [[224.37596130371094, 12.396671295166016, 306.4808349609375, 110.99388885498047]], "score": [0.9434449672698975], "output": ["image"], "data_type": "image_base64", "additional": [{"labels": [4]}]}, "status": "COMPLETED", "delayTime": 144953, "executionTime": 600}}}}}}}, "/8": {"post": {"tags": ["stable-diffusion-2"], "description": "Generate images with Stable Diffusion v2", "summary": "Predict with stable-diffusion-2", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X POST \"https://dev.mazaal.ai/api/sdk/pre-trained-models/8\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer mz-XXXXXXXXXXXX\" \\\n  -d '{\"input\": {\"input_str\": \"highly detailed, HD, 4K, portrait of elon musk, van gogh style\", \"input_type\": \"text\"}}'\n"}], "security": [{"Secret User Key": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/stable-diffusion-2"}, "example": {"input": {"input_str": "highly detailed, HD, 4K, portrait of elon musk, van gogh style"}}}}}, "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DefaultRes"}, "example": {"id": "9d21daec-f5fb-4b86-83f8-8b54c480a24b", "status": "IN_QUEUE"}}}}}}}, "/output/8?outId={process_id}": {"get": {"tags": ["stable-diffusion-2"], "summary": "Get result from stable-diffusion-2", "x-codeSamples": [{"lang": "Bash", "label": "cURL", "source": "curl -X GET \"https://dev.mazaal.ai/api/sdk/pre-trained-models/output/8?outId={process_id}\" \\\n -H \"Authorization: Bearer mz-XXXXXXXXXXXX\"\n"}], "parameters": [{"in": "query", "name": "process_id", "schema": {"type": "string"}, "description": "Process ID returned from a POST request."}], "responses": {"200": {"description": "Returns output", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/stable-diffusion-2-get"}, "example": {"id": "a3568540-3451-4cc5-acb1-f2dbbeb8ba5c-u1", "output": {"box": [], "score": [], "output": ["https://14068d66ba387efac9ce5e4b1741bcf2.r2.cloudflarestorage.com/ai-api/10-23/a3568540-3451-4cc5-acb1-f2dbbeb8ba5c-u1/64f1a360.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=16b502c87564788383d52ec498a61a24%2F20231018%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20231018T083204Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=63864e04a3ce3531343cc75dd75da5d4492ebd065010cb5b1416d99628fb2bed"], "data_type": "text", "additional": []}, "status": "COMPLETED", "delayTime": 8420, "executionTime": 32609}}}}}}}}}